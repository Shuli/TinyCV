#@author Hisashi Ikari

CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

PROJECT("Tiny Computer Vision" CXX)

SET(PJ_VERSION "1.0.0")
SET(CMAKE_BUILD_TYPE Release)

OPTION(BUILD_CPU "Perform image processing using CPU" ON)
OPTION(BUILD_CUDA "Perform image processing using CPU" OFF)
OPTION(BUILD_X5 "Perform image processing using X5" OFF)
OPTION(BUILD_MEASURE "Perform a loop of processing for measurement" OFF)
OPTION(BUILD_VIDEO "Process specified mpg video and display it on the screen" OFF)

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/Config.h.in ${CMAKE_CURRENT_BINARY_DIR}/Config.h)

IF(BUILD_CPU OR BUILD_CUDA OR BUILD_X5 OR BUILD_CL)
    FIND_PACKAGE(OpenCV REQUIRED)
    INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})
ENDIF()
IF(BUILD_CUDA)
    FIND_PACKAGE(CUDA REQUIRED)    
    INCLUDE_DIRECTORIES(${CUDA_INCLUDE_DIRS})
ENDIF()
FIND_PACKAGE(OpenMP)
IF(OPENMP_FOUND)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
ENDIF()

FIND_PACKAGE(Qt5Widgets REQUIRED)
FIND_PACKAGE(Qt5Concurrent REQUIRED)
MESSAGE(STATUS "Qt5 ${Qt5Widgets_VERSION_STRING}")
MESSAGE(STATUS "Qt5 ${Qt5Concurrent_VERSION_STRING}")
INCLUDE_DIRECTORIES(${Qt5Widgets_INCLUDE_DIRS} ${Qt5Concurrent_INCLUDE_DIRS})

SET(CMAKE_CXX_FLAGS_RELEASE "-std=c++11 -Wall -O3")
SET(CMAKE_CXX_FLAGS_DEBUG "-std=c++11 -Wall -g")

SET(MODULE_SOURCES Matrix.cpp)
SET(MODULE_HEADERS Matrix.h Operator.h Memory.h)
SET(EXECUTE_SOURCES Dehaze.cpp)
SET(EXECUTE_HEADERS Screen.h)

INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR} ${OpenMP_INCLUDE_DIRS})
LINK_DIRECTORIES(${PROJECT_LIBRARY_DIR})

ADD_LIBRARY(TinyCV SHARED ${MODULE_SOURCES} ${MODULE_HEADERS})
TARGET_LINK_LIBRARIES(TinyCV ${OpenCV_LIBS} ${OpenMP_LIBS})

SET(CMAKE_INCLUDE_CURRENT_DIR ON)
SET(CMAKE_AUTOMOC ON)
ADD_EXECUTABLE(Dehaze ${EXECUTE_SOURCES} ${EXECUTE_HEADERS})
TARGET_LINK_LIBRARIES(Dehaze TinyCV ${OpenCV_LIBS} ${OpenMP_LIBS})
QT5_USE_MODULES(Dehaze Widgets Concurrent)

MESSAGE(STATUS "Configure Variables")
MESSAGE(STATUS "BUILD_CPU=${BUILD_CPU}")
MESSAGE(STATUS "BUILD_CUDA=${BUILD_CUDA}")
MESSAGE(STATUS "BUILD_X5=${BUILD_X5}")
MESSAGE(STATUS "BUILD_CL=${BUILD_CL}")
MESSAGE(STATUS "BUILD_MEASURE=${BUILD_MEASURE}")
MESSAGE(STATUS "BUILD_VIDEO=${BUILD_VIDEO}")

